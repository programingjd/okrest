buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    classpath 'org.jsoup:jsoup:1.9.2'
  }
}

group 'info.jdavid.ok.rest'
version '3.3.1'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  jcenter()
//  maven {
//    url 'http://dl.bintray.com/programingjd/maven'
//  }
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.6'
//  compile ('info.jdavid.ok.server:okserver:1.0') {
//    artifact {
//      name = 'okserver'
//      extension = 'jar'
//      type = 'jar'
//      url = 'http://dl.bintray.com/programingjd/maven/info/jdavid/ok/server/okserver/1.0/'
//    }
//  }
  compile 'info.jdavid.ok.server:okserver:3.3.1'
  testCompile 'junit:junit:4.12'
  testCompile 'com.squareup.okhttp3:okhttp:3.3.1'
  testCompile 'info.jdavid.ok.json:okjson:3.3.1'
}

jacoco {
  reportsDir = file("$buildDir/jacoco/reports")
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled true
  }
}

test {
  jacoco {
    append = false
    destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    classDumpFile = file("$buildDir/jacoco/classpathdumps")
  }
  systemProperty 'https.proptocols', 'TLSv1.2'
  doLast {
    File html = reports.html.entryPoint
    def doc = org.jsoup.Jsoup.parse(html, 'UTF-8')
    int total = doc.select('#tests > .counter').text() as int
    int failed = doc.select('#failures > .counter').text() as int

    def readme = file('README.md')
    def badge = { String label, String text, String color ->
      "https://img.shields.io/badge/_${label}_-_${text}-${color}.png?style=flat"
    }
    String label = 'Tests'
    String text = "${total-failed}/${total}"
    String color = failed == 0 ? 'green' : (failed < 3 ? 'yellow' : 'red')
    String v = project.version
    def download =
      "https://bintray.com/artifact/download/programingjd/maven/info/jdavid/ok/rest/okrest/$v/okrest-${v}.jar"
    readme.readLines().withIndex().collect { line, i ->
      switch (i) {
        case 0:
          return "![jcenter](${badge('jcenter',v,'6688ff')}) &#x2003; ![jcenter](${badge(label,text,color)})"
        case 9: return "[Download](${download}) the latest jar."
        case 19: return "  <version>${v}</version>"
        case 32: return "  compile 'info.jdavid.ok.rest:okrest:${v}'"
        default: return line
      }
    }.join('\n').with { readme.text = it }
  }
  finalizedBy tasks.jacocoTestReport
}

task groovydocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from groovydoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar, groovydocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact groovydocJar
    }
  }
  repositories {
    maven {
      url "$buildDir/repo"
    }
  }
}


bintray {
  user = 'programingjd'
  key = getBintrayApiKey()
  dryRun = false
  publish = true
  publications = ['mavenJava']
  pkg {
    repo = 'maven'
    name = 'info.jdavid.ok.rest'
    websiteUrl = 'https://github.com/programingjd/okrest'
    issueTrackerUrl = 'https://github.com/programingjd/okrest/issues'
    vcsUrl = 'https://github.com/programingjd/okrest.git'
    githubRepo = 'programingjd/okrest'
    githubReleaseNotesFile = 'README.md'
    licenses = ['Apache-2.0']
    labels = ['server','http','rest','okio','okhttp','java']
    publicDownloadNumbers = true
    version {
      name = project.version
      mavenCentralSync {
        sync = false
      }
    }
  }
}

def getBintrayApiKey() {
  def f = new File("$projectDir/local.properties")
  f.text.splitEachLine('=', { if (it && it[0] == 'bintrayApiKey') return it[1] })
}
