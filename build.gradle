buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.3.1'
  }
}

group 'info.jdavid.ok.rest'
version '1.0'

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  jcenter()
}

dependencies {
  compile 'com.squareup.okhttp:okhttp:2.5.0'
  compile 'com.squareup.okhttp:mockwebserver:2.5.0'
  testCompile group: 'junit', name: 'junit', version: '4.12'
}

jacoco {
  reportsDir = file("$buildDir/jacoco/reports")
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled true
  }
}

test {
  jacoco {
    append = false
    destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    classDumpFile = file("$buildDir/jacoco/classpathdumps")
  }
  systemProperty 'https.proptocols', 'TLSv1.2'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar, javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      url "$buildDir/repo"
    }
  }
}


bintray {
  user = 'programingjd'
  key = getBintrayApiKey()
  dryRun = false
  publish = true
  publications = ['mavenJava']
  pkg {
    repo = 'maven'
    name = 'info.jdavid.ok.rest'
    websiteUrl = 'https://github.com/programingjd/okrest'
    issueTrackerUrl = 'https://github.com/programingjd/okrest/issues'
    vcsUrl = 'https://github.com/programingjd/okrest.git'
    licenses = ['Apache-2.0']
    labels = ['server','http','rest','okio','okhttp','java']
    publicDownloadNumbers = true
    version {
      name = project.version
      mavenCentralSync {
        sync = false
      }
    }
  }
}

def getBintrayApiKey() {
  def f = new File("$projectDir/local.properties")
  f.text.splitEachLine('=', { if (it && it[0] == 'bintrayApiKey') return it[1] })
}
